---
title: "in-class_ex09"
---

# Installing and Load Packages

```{r}
#spatialML GWRF
pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, 
               tmap, ggpubr, olsrr, devtools, rsample)
```

```{r}
#reading the input data sets. It is in simple feature (SF) data frame.
#rds is faster to retrieve
mdata <- read_rds("data/aspatial/mdata.rds")
```

# Data sampling

```{r}
#the entire data are split into training and test data sets with 
#65% training data, 35% test data
set.seed(1234)
resale_split <- initial_split(mdata,
                              prop = 6.5/10)
#renaming data into train data and test data
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
#| eval: false
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

Computing Correlation Matrix

```{r}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]),
                   diag = FALSE,
                   order = "AOE")

```

```{r}
train_data <- read_rds("data/model/train_data.rds")
test_data <- read_rds("data/model/test_data.rds")
```

```{r}
#only difference is with data=train_data (predictive model)

price_mlr <- lm(resale_price ~ floor_area_sqm + storey_order
                + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data)
summary(price_mlr)
```

```{r}
write_rds(price_mlr, "data/model/price_mlr.rds")
```

```{r}
#changing from sf form into sp form
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

```{r}
#random forest method
#need take the columns so that the algorithm can work
#ranger dont understand sf format
#extract out geometric information and save them in different coordinates file
#| eval: false
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
coords_train <- write_rds(coords_train, "data/model/coords_train.rds")
coords_test <- write_rds(coords_test, "data/model/coords_test.rds")
```

### Dropping Geometry Field

```{r}
train_data <- train_data %>%
  st_drop_geometry()
```

### Calibrating Random Forest

```{r}
#random forest, thus need set seed
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order
                + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,
             data=train_data)
```

```{r}
#No of trees: 500 subset
#Target node size: default is 5
#MSE = Mean squared error
#If comparing model, square root MSE then compare with RSE (residual standard error in OLS Model)
print(rf)
```

### Calibrating Geographically Weighted Random Forest Model

```{r}
#| eval: false
#need coordinates and specify bandwidth and kernel.
#55 nearest transaction because kernel is adaptive
#55 need to be calculated from a function (calculate first before doing this function)
#if kernel is fixed, is distance
#first part using it as a explanatory variable
#second part using it as a predictive modelling
#aicc , penalise number of observations that i have (if no biasness in sampling)
set.seed(1234)
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order
                + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,
             dframe = train_data,
             bw=55,
             kernel="adaptive",
             coords=coords_train)
```

```{r}
#how to determine bandwidth
#1st: borrow bandwidth from GWR 
#2nd: grf.bw function
```

```{r}
#| eval: false
#global model will tell u which variable contribute the most
#gwRF_adaptive$Global.Model$variable.importance
#vi_df <- as.data.frame(gwRF_adaptive$Global.Model$variable.importance)
write_rds(gwRF_adaptive, "data/model/gwrf_adaptive.rds")
```

```{r}
#predicting by using test data
#preparing the test data
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

```{r}
#| eval: false
#predicting with test data
#assume projected coordinate system, SVY21
gwRF_pred <- predict.grf(gwRF_adaptive,
                         test_data,
                         x.var.name="X",
                         y.var.name="Y",
                         local.w=1,
                         global.w=0)
```

```{r}
#| eval: false
#output is vector , vector of predictive value
gwRF_pred_df <- as.data.frame(gwRF_pred)
```
